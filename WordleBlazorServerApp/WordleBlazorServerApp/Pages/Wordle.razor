@page "/wordle"

@using WorldleGameEngine
@using global::Shared

@inject IGameEngine gameEngine;

<h3>Wordle</h3>

Enter wordle: <br/>

<table>
    @for(int guessIndex = 0; guessIndex < GameEngine.NUMBER_OF_ALLLOWED_GUESSES; guessIndex++)
    {
        <tr>
            @for(int letterIndex = 0; letterIndex < GameEngine.WORDLE_LENGTH; letterIndex++)
            {
                int x = guessIndex;
                int y = letterIndex;

                <td style="width: 5px;">
                    @if(guessIndex == gameEngine.GetNumberOfGuesses())
                    {
                        <input type="text" @bind-value="@guess[x, y]" />
                    }
                    else
                    {
                        <input type="text" disabled @bind-value="@guess[guessIndex, letterIndex]" />
                    }
                </td>
            }
        </tr>
    }
</table>

@if(!gameState.IsGameComplete)
{
    <button class="btn" type="button" @onclick="EnterGuess">Enter</button><br /><br />
}

<button class="btn" type="button" @onclick="NewGame">New Game</button><br /><br />

@if (gameState != null && gameState.GuessResult != null)
{
    @if(gameState.IsGameComplete)
    {
        <span>@gameState.GuessResult.ResultMessage</span>
    }
    else
    {
        if(gameState.GuessResult.IncorrectGuessHints != null)
        {
            if (gameState.GuessResult.IncorrectGuessHints.LetterPositionsPresentInGuessAndInCorrectPosition.Count > 0){
                <span>LetterPositionsPresentInGuessAndInCorrectPosition: </span>
                <span>@string.Join(" ", gameState.GuessResult.IncorrectGuessHints.LetterPositionsPresentInGuessAndInCorrectPosition)</span><br /><br />
            }

            @if (gameState.GuessResult.IncorrectGuessHints.LetterPositionsPresentInGuessButNotInCorrectPosition.Count > 0){
                <span>LetterPositionsPresentInGuessButNotInCorrectPosition: </span>
                <span>@string.Join(" ", gameState.GuessResult.IncorrectGuessHints.LetterPositionsPresentInGuessButNotInCorrectPosition)</span><br /><br />
            }

            @if (gameState.GuessResult.IncorrectGuessHints.LetterPositionsNotPresentInGuess.Count > 0){
                <span>LetterPositionsNotPresentInGuess: </span>
                <span>@string.Join(" ", gameState.GuessResult.IncorrectGuessHints.LetterPositionsNotPresentInGuess)</span><br /><br />
            }
        }
        else
        {
            <span>@gameState.GuessResult.ResultMessage</span>
        }
    }
}

@code {
    char[,] guess = new char[GameEngine.NUMBER_OF_ALLLOWED_GUESSES, GameEngine.WORDLE_LENGTH];
    GameState gameState;

    protected override void OnInitialized()
    {
        gameState = gameEngine.NewGame();
    }

    private void EnterGuess()
    {
        string currentGuess = string.Empty;

        for(int colIndex=0; colIndex < GameEngine.WORDLE_LENGTH;  colIndex++)
        {
            currentGuess += guess[gameEngine.GetNumberOfGuesses(), colIndex];
        }

        gameState = gameEngine.EnterGuess(currentGuess);
    }

    private void NewGame()
    {
        gameState = gameEngine.NewGame();

        for(int rowIndex=0; rowIndex < GameEngine.NUMBER_OF_ALLLOWED_GUESSES;  rowIndex++)
        {
            for(int colIndex=0; colIndex < GameEngine.WORDLE_LENGTH; colIndex++)
            {
                guess[rowIndex, colIndex] = (char) 0;
            }
        }
    }
}
